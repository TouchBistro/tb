anchors:
  node-service: &node-service
    LOGGER_CONFIG_JSON: >
      {
        "transports": {
          "devConsole": {
            "provider": "winston.transports.Console",
            "config": {
              "colorize": true,
              "timestamp": true,
              "json": false
            }
          }
        },
        "env": {
          "development": {
            "rules": [
              {
                "pattern": "*",
                "binding": {
                  "transport": ["devConsole"],
                  "level": "info"
                }
              }
            ]
          }
        }
      }
    HTTP_PORT: 8080
  postgres-connect: &postgres-connect
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USER: core
    DB_PASSWORD: localdev
    DB_DISABLE_SSL: "true"
  command-serve: &command-serve |
    bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'
  command-start: &command-start |
    bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
  build-node-dev: &build-node-dev
    target: dev
    args:
      NODE_ENV: development
      NPM_TOKEN: $NPM_TOKEN

global:
  baseImages:
    - touchbistro/alpine-node:10-build
    - touchbistro/alpine-node:10-runtime
    - touchbistro/alpine-node:12-build
    - touchbistro/alpine-node:12-runtime
    - touchbistro/ubuntu16-ruby:2.5.7-build
  loginStrategies:
    - ecr
    - npm
  variables:
    ecr: 651264383976.dkr.ecr.us-east-1.amazonaws.com

services:
  backoffice-customer-service:
    build:
      <<: *build-node-dev
      command: *command-start
      dockerfilePath: ${@REPOPATH}
    command: *command-serve
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *node-service, *postgres-connect ]
      JWT_AUTH_ISSUER_JWKS_URL: http://${@env:INFRASTRUCTURE_AUTH_SERVICE_NAME}:8080/jwks
      TASK_PROVIDER: inmemory
    ports:
      - '8700:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/backoffice-customer-service
      tag: master
    repo: TouchBistro/backoffice-customer-service
    volumes:
      - value: $TB_ROOT/repos/TouchBistro/backoffice-customer-service:/home/node/app:delegated
      - value: backoffice-customer-service-node_modules:/home/node/app/node_modules
        named: true
  cloud-server:
    build:
      dockerfilePath: ${@REPOPATH}
    command: >
      bash -c '
        echo '...done'
        if [ "$START_SERVER" = "true" ]; then
          echo "Starting server.."
          bundle exec unicorn -p 3000 -c ./config/unicorn.rb
        else
          echo "Not starting server.."
          tail -f /dev/null
        fi'
    entrypoint: ["bash", "./docker-entrypoint.sh"]
    envFile: ${@REPOPATH}/.env.compose
    envVars:
      MSSQL_HOST: ${@LEGACY_DATABASE_NAME}
    ports:
      - '3000:3000'
    remote:
      enabled: true
      image: ${ecr}/cloud-server
      tag: develop
    repo: TouchBistro/cloud-server
  cloud-server-frontend:
    build:
      args:
        USE_INSECURE_COOKIE: insecure
      dockerfilePath: ${@REPOPATH}/packages/frontend
    envFile: ${@REPOPATH}/.env.example
    ports:
      - '8080:80'
    remote:
      enabled: true
      image: ${ecr}/cloud-server-frontend
      tag: develop
    repo: TouchBistro/cloud-server-frontend
  dotnet-api:
    repo: TouchBistro/dotnet-depot
  dotnet-manage:
    repo: TouchBistro/dotnet-depot
  health-clinic:
    remote:
      enabled: true
      image: ${ecr}/health-clinic
      tag: master
    repo: TouchBistro/health-clinic
  identity-user-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/identity-user-service
      tag: master
    repo: TouchBistro/identity-user-service
  infrastructure-auth-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/infrastructure-auth-service
      tag: master
    repo: TouchBistro/infrastructure-auth-service
  infrastructure-scratchpad-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/infrastructure-scratchpad-service
      tag: master
    repo: TouchBistro/infrastructure-scratchpad-service
  legacy-bridge-cloud-service:
    remote:
      enabled: true
      image: ${ecr}/legacy-bridge-cloud-service
      tag: master
    repo: TouchBistro/legacy-bridge-cloud-service
  legacy-bridge-manage-service:
    remote:
      enabled: true
      image: ${ecr}/legacy-bridge-manage-service
      tag: master
    repo: TouchBistro/legacy-bridge-manage-service
  legacy-database:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/legacy-database
      tag: master-db-migrate-with-seeds
    repo: TouchBistro/legacy-database
  localstack:
    remote:
      enabled: true
      image: localstack/localstack
  loyalty-gateway-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/loyalty-gateway-service
      tag: master
    repo: TouchBistro/loyalty-gateway-service
  postgres:
    remote:
      enabled: true
      image: postgres
      tag: 10.6-alpine
  redis:
    remote:
      enabled: true
      image: redis
      tag: 4-alpine
  mokta:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/mokta
      tag: master
    repo: TouchBistro/mokta
  ordering-demo-frontend:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/ordering-demo-frontend
      tag: master
    repo: TouchBistro/ordering-demo-frontend
  ordering-demo-frontend-venue:
    repo: TouchBistro/ordering-demo-frontend
  ordering-engine-service:
    remote:
      enabled: true
      image: ${ecr}/ordering-engine-service
      tag: master
    repo: TouchBistro/ordering-engine-service
  ordering-online-frontend:
    remote:
      enabled: true
      image: ${ecr}/ordering-online-frontend
      tag: master
    repo: TouchBistro/ordering-online-frontend
  ordering-gateways-frontend:
    remote:
      enabled: true
      image: ${ecr}/ordering-gateways-frontend
      tag: master
    repo: TouchBistro/ordering-gateways-frontend
  ordering-ooa-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/ordering-ooa-service
      tag: master
    repo: TouchBistro/ordering-ooa-service
  partners-config-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-config-service
      tag: master
    repo: TouchBistro/partners-config-service
  partners-etl-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-etl-service
      tag: master
    repo: TouchBistro/partners-etl-service
  partners-orchestration-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-orchestration-service
      tag: master
    repo: TouchBistro/partners-orchestration-service
  partners-reservations-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-reservations-service
      tag: master
    repo: TouchBistro/partners-reservations-service
  payments-gateway-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/payments-gateway-service
      tag: master
    repo: TouchBistro/payments-gateway-service
  singleapp-database:
    remote:
      enabled: true
      image: ${ecr}/singleapp-database
      tag: master
    repo: TouchBistro/singleapp-database
  venue-admin-frontend:
    remote:
      enabled: true
      image: ${ecr}/venue-admin-frontend
      tag: master
    repo: TouchBistro/venue-admin-frontend
  venue-core-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/venue-core-service
      tag: master
    repo: TouchBistro/venue-core-service
  venue-provisioning-service:
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/venue-provisioning-service
      tag: master
    repo: TouchBistro/venue-provisioning-service
  venue-upload-service:
    remote:
      enabled: true
      image: ${ecr}/venue-upload-service
      tag: master
    repo: TouchBistro/venue-upload-service
  legacy-upload-service:
    remote:
      enabled: true
      image: ${ecr}/legacy-upload-service
      tag: master
    repo: TouchBistro/legacy-upload-service
  yp-singleapp-api:
    repo: TouchBistro/yp-singleapp-api
