anchors:
  node-service: &node-service
    LOGGER_CONFIG_JSON: >
      {
        "transports": {
          "devConsole": {
            "provider": "winston.transports.Console",
            "config": {
              "colorize": true,
              "timestamp": true,
              "json": false
            }
          }
        },
        "env": {
          "development": {
            "rules": [
              {
                "pattern": "*",
                "binding": {
                  "transport": ["devConsole"],
                  "level": "info"
                }
              }
            ]
          }
        }
      }
    HTTP_PORT: 8080
  postgres-connect: &postgres-connect
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USER: core
    DB_PASSWORD: localdev
    DB_DISABLE_SSL: "true"
  mssqlconnect: &mssql-connect
    DB_HOST: legacy-database
    DB_PORT: 1433
    DB_USER: SA
    DB_PASSWORD: Password123
    DB_DISABLE_SSL: "true"
    DB_NAME: cloud_db
  command-serve: &command-serve |
    bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'
  command-start: &command-start |
    bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
  build-node-dev: &build-node-dev
    target: dev
    command: *command-start
    dockerfilePath: ${@REPOPATH}
    args:
      NODE_ENV: development
      NPM_TOKEN: $NPM_TOKEN

global:
  baseImages:
    - touchbistro/alpine-node:10-build
    - touchbistro/alpine-node:10-runtime
    - touchbistro/alpine-node:12-build
    - touchbistro/alpine-node:12-runtime
    - touchbistro/ubuntu16-ruby:2.5.7-build
  loginStrategies:
    - ecr
    - npm
  variables:
    ecr: 651264383976.dkr.ecr.us-east-1.amazonaws.com

services:
  backoffice-customer-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - infrastructure-auth-service
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *node-service, *postgres-connect ]
      JWT_AUTH_ISSUER_JWKS_URL: http://infrastructure-auth-service:8080/jwks
      TASK_PROVIDER: inmemory
    ports:
      - '8700:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/backoffice-customer-service
      tag: master
    repo: TouchBistro/backoffice-customer-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: backoffice-customer-service-node_modules:/home/node/app/node_modules
        named: true
  cloud-server:
    build:
      dockerfilePath: ${@REPOPATH}
    command: >
      bash -c '
        echo '...done'
        if [ "$START_SERVER" = "true" ]; then
          echo "Starting server.."
          bundle exec unicorn -p 3000 -c ./config/unicorn.rb
        else
          echo "Not starting server.."
          tail -f /dev/null
        fi'
    dependencies:
      - redis
      - legacy-database
    entrypoint: ["bash", "./docker-entrypoint.sh"]
    envFile: ${@REPOPATH}/.env.compose
    envVars:
      MSSQL_HOST: legacy-database
    ports:
      - '3000:3000'
    remote:
      enabled: true
      image: ${ecr}/cloud-server
      tag: develop
    repo: TouchBistro/cloud-server
  cloud-server-frontend:
    build:
      args:
        USE_INSECURE_COOKIE: insecure
      dockerfilePath: ${@REPOPATH}/packages/frontend
    dependencies:
      - cloud-server
    envFile: ${@REPOPATH}/packages/frontend/.env.example
    ports:
      - '8080:80'
    remote:
      enabled: true
      image: ${ecr}/cloud-server-frontend
      tag: develop
    repo: TouchBistro/cloud-server-frontend
  dotnet-api:
    build:
      dockerfilePath: ${@REPOPATH}/api
    dependencies:
      - legacy-database
    envVars:
      MONO_OPTIONS: --debug
    ports:
      - '9001:80'
    repo: TouchBistro/dotnet-depot
  dotnet-manage:
    build:
      dockerfilePath: ${@REPOPATH}/Manage
    dependencies:
      - legacy-database
    envVars:
      MONO_OPTIONS: --debug
    ports:
      - '9000:80'
    repo: TouchBistro/dotnet-depot
  health-clinic:
    build:
      dockerfilePath: ${@REPOPATH}
    command: 'tail -f /dev/null'
    envFile: ${@REPOPATH}/.env.compose
    ports:
      - '8089:8089'
    remote:
      enabled: true
      image: ${ecr}/health-clinic
      tag: master
    repo: TouchBistro/health-clinic
    volumes:
      - value: ${@REPOPATH}:/home/python/app
  identity-user-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *node-service, *postgres-connect ]
      OKTA_BASE_URL: https://${MOKTA_NAME}:8080
      INSECURE_DISABLE_SSL_VALIDATION: "true"
    ports:
      - '8777:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/identity-user-service
      tag: master
    repo: TouchBistro/identity-user-service
  infrastructure-auth-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *node-service, *postgres-connect ]
    ports:
      - '8073:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/infrastructure-auth-service
      tag: master
    repo: TouchBistro/infrastructure-auth-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
  infrastructure-scratchpad-service:
    build:
      <<: *build-node-dev
      command: *command-start
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *node-service, *postgres-connect ]
    ports:
      - '8181:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/infrastructure-scratchpad-service
      tag: master
    repo: TouchBistro/infrastructure-scratchpad-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
  legacy-bridge-cloud-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - legacy-database
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *mssql-connect, *node-service ]
    ports:
      - '8101:8080'
    remote:
      enabled: true
      image: ${ecr}/legacy-bridge-cloud-service
      tag: master
    repo: TouchBistro/legacy-bridge-cloud-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: legacy-bridge-cloud-service-node_modules:/home/node/app/node_modules
        named: true
  legacy-bridge-manage-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - legacy-database
    envFile: ${@REPOPATH}/.env.compose
    envVars:
      <<: [ *mssql-connect, *node-service ]
    ports:
      - '8999:8080'
    remote:
      enabled: true
      image: ${ecr}/legacy-bridge-manage-service
      tag: master
    repo: TouchBistro/legacy-bridge-manage-service
  legacy-database:
    build:
      args:
        NODE_ENV: development
        NPM_TOKEN: $NPM_TOKEN
      dockerfilePath: ${@REPOPATH}
      target: db-migrate-with-seeds
    command: "tail -f /dev/null"
    entrypoint: ["bash", "./docker-entrypoint-db.sh"]
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *mssql-connect
      DB_HOST: localhost
    ports:
      - '1433:1433'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/legacy-database
      tag: master-db-migrate-with-seeds
    repo: TouchBistro/legacy-database
    volumes:
      - value: legacy-database:/var/opt/mssql/data
        named: true
  localstack:
    envVars:
      SERVICES: s3,sqs,sns
      PORT_WEB_UI: '8080'
      DOCKER_HOST: unix:///var/run/docker.sock
    ports:
      - '9888:8080' # web interface
      - '4567-4584:4567-4584'
    remote:
      enabled: true
      image: localstack/localstack
    volumes:
      - value: "/var/run/docker.sock:/var/run/docker.sock"
        remote: true
      - value: "${@ROOTPATH}/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/aa_localstack_entrypoint.sh" # docker-entrypoint-initaws.d files are run in alphabetical order
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/venue-core-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_core_backend.sh"
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/venue-upload-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_venue_upload.sh"
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/ordering-ooa-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_ordering_service.sh"
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/partners-etl-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_etl.sh"
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/partners-config-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_partner_config.sh"
        remote: true
      - value: "${@ROOTPATH}/repos/TouchBistro/partners-orchestration-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_orchestration_partner.sh"
        remote: true
  loyalty-gateway-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
    ports:
      - '8600:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/loyalty-gateway-service
      tag: master
    repo: TouchBistro/loyalty-gateway-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
  postgres:
    envVars:
      POSTGRES_USER: core
      POSTGRES_PASSWORD: localdev
    ports:
      - '5432:5432'
    remote:
      enabled: true
      image: postgres
      tag: 10.6-alpine
    volumes:
      - value: postgres:/var/lib/postgresql/data
        named: true
        remote: true
  redis:
    ports:
      - '6379:6379'
    remote:
      enabled: true
      image: redis
      tag: 4-alpine
  mokta:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
    ports:
      - '9443:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/mokta
      tag: master
    repo: TouchBistro/mokta
  ordering-demo-frontend:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      DELIVEROO_DISABLED: "true"
      ORDERING_BASE_URL: http://ordering-ooa-service:8080/external
      URL_CALLBACK_URL: http://ordering-demo-frontend:8080/callback
    ports:
      - '8010:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/ordering-demo-frontend
      tag: master
    repo: TouchBistro/ordering-demo-frontend
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-demo-frontend-node_modules:/home/node/app/node_modules
        named: true
  ordering-demo-frontend-venue:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      INVENUE_BASE_URL: http://ordering-ooa-service:8080/external
      MODE: venue
    ports:
      - '8020:8080'
    repo: TouchBistro/ordering-demo-frontend
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-gateways-frontend-node_modules:/home/node/app/node_modules
        named: true
  ordering-engine-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - ordering-ooa-service
      - singleapp-database
      - yp-singleapp-api
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *node-service
      DB_HOST: singleapp-database
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: root
      DB_DISABLE_SSL: "true"
      JWT_AUTH_ISSUER_JWKS_URL: http://infrastructure-auth-service:8080/jwks
      ORDERING_INTERNAL_BASE_URL: http://ordering-ooa-service:8080/internal
      SINGLEAPP_BASE_URL: http://yp-singleapp-api:80
    ports:
      - '8610:8080'
    remote:
      enabled: true
      image: ${ecr}/ordering-engine-service
      tag: master
    repo: TouchBistro/ordering-engine-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-engine-service-node_modules:/home/node/app/node_modules
        named: true
  ordering-online-frontend:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - infrastructure-auth-service
      - ordering-engine-service
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *node-service
      INFRASTRUCTURE_AUTH_BASE_URL: http://infrastructure-auth-service:8080/v1
    ORDERING_ENGINE_URL: http://ordering-engine-service:8080/v1
    ports:
      - '8611:8080'
    remote:
      enabled: true
      image: ${ecr}/ordering-online-frontend
      tag: master
    repo: TouchBistro/ordering-online-frontend
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-online-frontend-node_modules:/home/node/app/node_module
  ordering-gateways-frontend:
    build:
      <<: *build-node-dev
    command: *command-serve
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *node-service
      ORDERING_BASE_URL: http://ordering-ooa-service:8080/external
      ORDERING_INTERNAL_BASE_URL: http://ordering-ooa-service:8080/internal
    ports:
      - '8030:8080'
    remote:
      enabled: true
      image: ${ecr}/ordering-gateways-frontend
      tag: master
    repo: TouchBistro/ordering-gateways-frontend
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-gateways-frontend-node_modules:/home/node/app/node_modules
        named: true
  ordering-ooa-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        {
          "ordering.notification.venue.menuUpdate": {
            "queueURL": "http://localstack:4576/queue/menuUpdate",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "ordering.notification.venue.orderCancelled": {
            "queueURL": "http://localstack:4576/queue/orderCancelled",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "ordering.notification.venue.ordersPending": {
            "queueURL": "http://localstack:4576/queue/ordersPending",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "ordering.notification.gateway.ordersStatus": {
            "queueURL": "http://localstack:4576/queue/ordersStatus",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "ordering.order.expiryCheck": {
            "queueURL": "http://localstack:4576/queue/expiryCheck",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "ordering.order.validate": {
            "queueURL": "http://localstack:4576/queue/orderValidate",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
      TOUCHBISTRO_LEGACY_CLOUD_BASE_URL: http://legacy-bridge-cloud-service:8080
      TOUCHBISTRO_LEGACY_BRIDGE_CLOUD_BASE_URL: http://legacy-bridge-cloud-service:8080
    dependencies:
      - postgres
      - localstack
    ports:
      - '8005:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/ordering-ooa-service
      tag: master
    repo: TouchBistro/ordering-ooa-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: ordering-ooa-service-node_modules:/home/node/app/node_modules
        named: true
  partners-config-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      LEGACY_CLOUD_SERVICE_URL: http://legacy-bridge-cloud-service:8080
      PARTNER_CONFIG_SERVICE_URL: http://partners-config-service:8080
      PARTNERS_RESERVATIONS_SERVICE_URL: http://partners-reservations-service:8080
      VENUE_PROVISIONING_SERVICE_URL: http://venue-provisioning-service:8080/internal
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        "workflow.runNextInstruction": {
          "queueURL": "http://localstack:4576/queue/workflowRunNextInstruction",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        {
          "partners-config.task.venueIntegrationUpdate": {
            "queueURL": "http://localstack:4576/queue/venueIntegrationUpdate",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
    ports:
      - '8090:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-config-service
      tag: master
    repo: TouchBistro/partners-config-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: partners-config-service-node_modules:/home/node/app/node_modules
        named: true
  partners-etl-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      AWS_S3_ENDPOINT: http://localstack:4572
      AWS_S3_STUB: "false"
      PARTNER_CONFIG_SERVICE_URL: http://partners-config-service:8080
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        {
          "etl.job.execute": {
            "queueURL": "http://localstack:4576/queue/etlExecute",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
    ports:
      - '8888:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-etl-service
      tag: master
    repo: TouchBistro/partners-etl-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: partners-etl-service-node_modules:/home/node/app/node_modules
        named: true
  partners-orchestration-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      LEGACY_CLOUD_SERVICE_URL: http://legacy-bridge-cloud-service:8080
      PARTNER_CONFIG_SERVICE_URL: http://partners-config-service:8080
      PARTNERS_RESERVATIONS_SERVICE_URL: http://partners-reservations-service:8080
      VENUE_PROVISIONING_SERVICE_URL: http://venue-provisioning-service:8080/internal
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        {
          "workflow.runNextInstruction": {
            "queueURL": "http://localstack:4576/queue/workflowRunNextInstruction",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          },
          "partners-config.task.venueIntegrationUpdate": {
            "queueURL": "http://localstack:4576/queue/venueIntegrationUpdate",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
    ports:
      - '8085:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-orchestration-service
      tag: master
    repo: TouchBistro/partners-orchestration-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: partners-orchestration-service-node_modules:/home/node/app/node_modules
        named: true
  partners-reservations-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
      - venue-upload-service
      - partners-config-service
      - partners-orchestration-service
      - legacy-bridge-cloud-service
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      AWS_S3_ENDPOINT: http://localstack:4572
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        {
          "venue-upload.task.venueUpload": {
            "queueURL": "http://localstack:4576/queue/venueUpload",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
    ports:
      - '8602:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/partners-reservations-service
      tag: master
    repo: TouchBistro/partners-reservations-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: partners-reservations-service-node_modules:/home/node/app/node_modules
        named: true
  payments-gateway-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
    ports:
      - '8008:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/payments-gateway-service
      tag: master
    repo: TouchBistro/payments-gateway-service
  singleapp-database:
    build:
      dockerfilePath: ${@REPOPATH}
    ports:
      - '3306:3306'
    remote:
      enabled: true
      image: ${ecr}/singleapp-database
      tag: master
    repo: TouchBistro/singleapp-database
    volumes:
      - value: singleapp-database:/var/lib/mysql/
        named: true
        remote: true
  venue-admin-frontend:
    build:
      args:
        NPM_TOKEN: $NPM_TOKEN
      dockerfilePath: ${@REPOPATH}
      target: release
    command: *command-serve
    dependencies:
      - venue-core-service
      - cloud-server
      - legacy-bridge-cloud-service
      - partners-config-service
    # Note the `../`, since the Dockerfile executes from $HOME/app/dist
    entrypoint: ["bash", "../docker-entrypoint.sh"]
    envFile: ${@REPOPATH}/.env.example
    envVars:
      CORE_BACKEND_URL_BASE: http://venue-core-service:8080
      TOUCHBISTRO_PARTNER_CONFIG_URL_BASE: http://partners-config-service:8080
      TOUCHBISTRO_LEGACY_BRIDGE_API_URL_BASE: http://legacy-bridge-cloud-service:8080
      INFRASTRUCTURE_AUTH_SERVICE_URL: http://infrastructure-auth-service:8080
      HTTP_PORT: 9002 # VAF will default to :5000 for local server development.
      NODE_ENV: production
    ports:
      - '9002:9002'
    remote:
      enabled: true
      image: ${ecr}/venue-admin-frontend
      tag: master
    repo: TouchBistro/venue-admin-frontend
  venue-core-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
    entrypoint: ["bash", "./entrypoints/server-entrypoint.sh"]
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *node-service
    DB_HOST: postgres
    PROVISIONING_JWKS_URI: http://venue-provisioning-service:8080/external/jwks
    AWS_S3_CORE_IMAGE_URL_TEMPLATE: http://localstack:4572/%%s3Bucket%%/%%s3ObjectKey%%
    AWS_S3_CORE_FILE_URL_TEMPLATE: http://localstack:4572/%%s3Bucket%%/%%s3ObjectKey%%
    AWS_S3_ENDPOINT: http://localstack:4572
    LOCALSTACK_SQS_URL: http://localstack:4576
    # Note: Remove USE_INSECURE_IMPERSONATE after https://github.com/TouchBistro/venue-core-service/pull/239 is merged.
    # Keeping for backwards compatibility.
    USE_INSECURE_IMPERSONATE: insecure
    INFRASTRUCTURE_AUTH_SERVICE_JWKS_URI: http://infrastructure-auth-service:8080/jwks
    INFRASTRUCTURE_AUTH_SERVICE_ISSUER: urn:touchbistro:oauth:iss:services:local
    TOUCHBISTRO_LEGACY_BRIDGE_CLOUD_BASE_URL: http://legacy-bridge-cloud-service:8080
    LOGGER_CONFIG_JSON: >
      {
        "transports": {
          "devConsole": {
            "provider": "winston.transports.Console",
            "config": {
              "colorize": true,
              "timestamp": true,
              "json": false
            }
          },
          "graphqlLegacy": {
            "provider": "winston.transports.File",
            "config": {
              "filename": "./logs/request_graphql_legacy.log",
              "timestamp": true,
              "json": true
            }
          },
          "graphqlUp": {
            "provider": "winston.transports.File",
            "config": {
              "filename": "./logs/request_graphql_up.log",
              "timestamp": true,
              "json": true
            }
          },
          "errorLog": {
            "provider": "winston.transports.File",
            "config": {
              "filename": "./logs/error_log.log",
              "timestamp": true,
              "json": true
            }
          }
        },
        "env": {
          "development": {
            "rules": [
              {
                "pattern": "*",
                "binding": {
                  "transport": ["devConsole"],
                  "level": "info"
                }
              },
              {
                "pattern": "core.backend.request.log.graphql.legacy.*",
                "binding": {
                  "transport": ["graphqlLegacy"],
                  "level": "debug"
                }
              },
              {
                "pattern": "core.backend.request.log.graphql.up.*",
                "binding": {
                  "transport": ["graphqlUp"],
                  "level": "debug"
                }
              },
              {
                "pattern": "core.backend.loggable.error.class.*",
                "binding": {
                  "transport": ["errorLog"],
                  "level": "debug"
                }
              },
              {
                "pattern": "core.backend.error.not.from.defined.core.error",
                "binding": {
                  "transport": ["errorLog"],
                  "level": "debug"
                }
              }
            ]
          }
        }
      }
    ports:
      - '8081:8080' # Main HTTP port
      - '9901:9229' # 9229, 9330: Node debugger
      - '9902:9230'
      - '4001:4001' # JSDoc server
      - '9903:8090' # rtail log server
      # - '8089:8089'   # Not used?
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/venue-core-service
      tag: master
    repo: TouchBistro/venue-core-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: venue-core-service-node_modules:/home/node/app/node_modules:delegated
        named: true
  venue-provisioning-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
      TOUCHBISTRO_GEN1_CLOUD_BASE_URL: http://cloud-server:3000
      TOUCHBISTRO_LEGACY_BRIDGE_CLOUD_BASE_URL: http://legacy-bridge-cloud-service:8080
    port:
      - '8666:8080'
    preRun: yarn db:prepare
    remote:
      enabled: true
      image: ${ecr}/venue-provisioning-service
      tag: master
    repo: TouchBistro/venue-provisioning-service
  venue-upload-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - localstack
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: *node-service
      AWS_S3_ENDPOINT: http://localstack:4572
      TASK_PROVIDER: awssqs
      TASK_AWS_SQS_CONFIG_JSON: >
        {
          "venue-upload.task.venueUpload": {
            "queueURL": "http://localstack:4576/queue/venueUpload",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5,
            "sendOnly": true
          },
          "venue-upload.task.validateOrder": {
            "queueURL": "http://localstack:4576/queue/validateOrder",
            "messageThrottle": 1,
            "visibilityTimeout": 10,
            "waitTimeSeconds": 5,
            "sleepTimeSeconds": 5
          }
        }
    ports:
      - '8601:8080'
    remote:
      enabled: true
      image: ${ecr}/venue-upload-service
      tag: master
    repo: TouchBistro/venue-upload-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: venue-upload-service-node_modules:/home/node/app/node_modules
        named: true
  legacy-upload-service:
    build:
      <<: *build-node-dev
    command: *command-serve
    dependencies:
      - postgres
      - localstack
    envFile: ${@REPOPATH}/.env.example
    envVars:
      <<: [ *postgres-connect, *node-service ]
    ports:
      - '8009:8080'
    remote:
      enabled: true
      image: ${ecr}/legacy-upload-service
      tag: master
    repo: TouchBistro/legacy-upload-service
    volumes:
      - value: ${@REPOPATH}:/home/node/app:delegated
      - value: legacy-upload-service-node_modules:/home/node/app/node_modules
        named: true
  yp-singleapp-api:
    build:
      args:
        HOMEBREW_GITHUB_API_TOKEN: $HOMEBREW_GITHUB_API_TOKEN
      dockerfilePath: ${@REPOPATH}
    dependencies:
      - singleapp-database
    ports:
      - '8023:80'
    repo: TouchBistro/yp-singleapp-api
