version: '3.7'

###### ANCHORS ######

x-json-logger-config:
  &json-logger-config
  LOGGER_CONFIG_JSON: >
    {
      "transports": {
        "devConsole": {
          "provider": "winston.transports.Console",
          "config": {
            "colorize": true,
            "timestamp": true,
            "json": false
          }
        }
      },
      "env": {
        "development": {
          "rules": [
            {
              "pattern": "*",
              "binding": {
                "transport": ["devConsole"],
                "level": "info"
              }
            }
          ]
        }
      }
    }

x-postgresconnect:
  &postgres-connect
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: core
  DB_PASSWORD: localdev
  DB_DISABLE_SSL: "true"

x-mssqlconnect:
  &mssql-connect
  DB_HOST: legacy-database-ecr
  DB_PORT: 1433
  DB_USER: SA
  DB_PASSWORD: Password123
  DB_DISABLE_SSL: "true"

x-mysqlconnect:
  &mysql-connect
  DB_HOST: singleapp-database-ecr
  DB_PORT: 3306
  DB_USER: root
  DB_PASSWORD: root
  DB_DISABLE_SSL: "true"

x-nodeservice:
  &node-service
  << : *json-logger-config
  HTTP_PORT: 8080

x-command-serve:
  &command-serve
  command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'

x-command-start:
  &command-start
  command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'

x-build-node-dev:
  &build-node-dev
  target: dev
  args:
    - NODE_ENV=development
    - NPM_TOKEN=$NPM_TOKEN

###### BOILERPLATES ######

x-mokta-boilerplate:
  &mokta-boilerplate
  env_file:
    - $TB_ROOT/mokta/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *node-service
    << : *postgres-connect
  ports:
    - "9443:8080"
  depends_on:
    - postgres

x-identity-user-service-boilerplate:
  &identity-user-service-boilerplate
  env_file:
    - $TB_ROOT/identity-user-service/.env.example
  ports:
    - "8777:8080"

x-cloud-server-frontend-boilerplate:
  &cloud-server-frontend-boilerplate
  init: true
  env_file:
    - $TB_ROOT/cloud-server-frontend/packages/frontend/.env.example
  ports:
    - "8080:80"
  depends_on:
    - $CLOUD_SERVER_NAME

x-legacy-database-boilerplate:
  &legacy-database-boilerplate
  env_file:
    - $TB_ROOT/legacy-database/.env.example
  environment:
    DB_PORT: 1433
    DB_USER: SA
    DB_PASSWORD: Password123
    DB_DISABLE_SSL: "true"
    DB_HOST: localhost
    DB_NAME: cloud_db
  ports:
    - "1433:1433"
  entrypoint: [ "bash", "./docker-entrypoint-db.sh" ]
  command: [ "tail", "-f", "/dev/null" ]

x-cloud-server-boilerplate:
  &cloud-server-boilerplate
    env_file:
      - $TB_ROOT/cloud-server/.env.compose
    environment:
      - MSSQL_HOST=legacy-database-ecr
    entrypoint: [ "bash", "./docker-entrypoint.sh" ]
    command: >
      bash -c '
        echo '...done'
        if [ "$START_SERVER" = "true" ]; then
          echo "Starting server.."
          bundle exec unicorn -p 3000 -c ./config/unicorn.rb
        else
          echo "Not starting server.."
          tail -f /dev/null
        fi'
    ports:
      - "3000:3000"
    depends_on:
      - redis
      - $LEGACY_DATABASE_NAME

x-venue-provisioning-service-boilerplate:
  &venue-provisioning-service-boilerplate
  env_file:
    - $TB_ROOT/venue-provisioning-service/.env.example
  environment:
    << : *postgres-connect
    << : *node-service
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  ports:
    - "8666:8080"
  depends_on:
    - postgres

x-health-clinic-boilerplate:
  &health-clinic-boilerplate
  command: ["tail", "-f", "/dev/null"]
  env_file:
    - $TB_ROOT/health-clinic/.env.compose
  ports:
    - "8089:8089"

x-dotnet-boilerplate:
  &dotnet-boilerplate
  image: hpgy/mono-xsp4
  environment:
    MONO_OPTIONS: --debug
  entrypoint:
    [ "xsp4","--port","80","--nonstop", "--verbose", "--printlog", "--loglevels", "All" ]
  depends_on:
    - $LEGACY_DATABASE_NAME

x-venue-core-service-boilerplate:
  &venue-core-service-boilerplate
  command: ["tail", "-f", "/dev/null"]
  entrypoint: ["bash", "./entrypoints/server-entrypoint.sh"]
  env_file:
    - $TB_ROOT/venue-core-service/.env.example
  environment:
    << : *node-service
    DB_HOST: postgres
    PROVISIONING_JWKS_URI: http://${VENUE_PROVISIONING_SERVICE_NAME}:8080/external/jwks
    AWS_S3_CORE_IMAGE_URL_TEMPLATE: http://localstack:4572/%%s3Bucket%%/%%s3ObjectKey%%
    AWS_S3_CORE_FILE_URL_TEMPLATE: http://localstack:4572/%%s3Bucket%%/%%s3ObjectKey%%
    AWS_S3_ENDPOINT: http://localstack:4572
    LOCALSTACK_SQS_URL: http://localstack:4576
    # Note: Remove USE_INSECURE_IMPERSONATE after https://github.com/TouchBistro/venue-core-service/pull/239 is merged.
    # Keeping for backwards compatibility.
    USE_INSECURE_IMPERSONATE: insecure
    INFRASTRUCTURE_AUTH_SERVICE_JWKS_URI: http://${INFRASTRUCTURE_AUTH_SERVICE_NAME}:8080/jwks
    INFRASTRUCTURE_AUTH_SERVICE_ISSUER: urn:touchbistro:oauth:iss:services:local
    TASK_AWS_SQS_CONFIG_JSON: >
      {"core.task.data.migration":{"queueURL":"http://localstack:4576/queue/coreTest","messageThrottle":1,"visibilityTimeout":10,"waitTimeSeconds":5,"sleepTimeSeconds":5}}
  ports:
    - "8081:8080"  # Main HTTP port
    - "9901:9229"  # 9229, 9330: Node debugger
    - "9902:9230"
    - "4001:4001"  # JSDoc server
    - "9901:9999"  # rtail log server
    # - "8089:8089"   # Not used?
  depends_on:
    - localstack
    - postgres

x-legacy-bridge-manage-service-boilerplate:
  &legacy-bridge-manage-service-boilerplate
  entrypoint: [ "bash", "./docker-entrypoint.sh" ]
  env_file:
    - $TB_ROOT/legacy-bridge-manage-service/.env.example
  environment:
    << : *mssql-connect
    DB_NAME: cloud_db
    << : *json-logger-config
  ports:
    - "8999:8080"
  depends_on:
    - $LEGACY_DATABASE_NAME

x-legacy-bridge-cloud-service-boilerplate:
  &legacy-bridge-cloud-service-boilerplate
  entrypoint: [ "bash", "./docker-entrypoint.sh" ]
  env_file:
    - $TB_ROOT/legacy-bridge-cloud-service/.env.example
  environment:
    << : *mssql-connect
    << : *node-service
    DB_NAME: cloud_db
  ports:
    - "8101:8080"
  depends_on:
    - $LEGACY_DATABASE_NAME

x-ordering-ooa-service-boilerplate:
  &ordering-ooa-service-boilerplate
  env_file:
    - $TB_ROOT/ordering-ooa-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "ordering.notification.venue.menuUpdate": {
          "queueURL": "http://localstack:4576/queue/menuUpdate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.venue.orderCancelled": {
          "queueURL": "http://localstack:4576/queue/orderCancelled",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.venue.ordersPending": {
          "queueURL": "http://localstack:4576/queue/ordersPending",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.gateway.ordersStatus": {
          "queueURL": "http://localstack:4576/queue/ordersStatus",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.order.expiryCheck": {
          "queueURL": "http://localstack:4576/queue/expiryCheck",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.order.validate": {
          "queueURL": "http://localstack:4576/queue/orderValidate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
    TOUCHBISTRO_LEGACY_CLOUD_BASE_URL: http://${LEGACY_BRIDGE_CLOUD_SERVICE_NAME}:8080
  ports:
    - "8005:8080"
  depends_on:
    - postgres
    - localstack

x-ordering-demo-frontend-boilerplate:
  &ordering-demo-frontend-boilerplate
  env_file:
    - $TB_ROOT/ordering-demo-frontend/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    DELIVEROO_BASE_URL: http://${ORDERING_DELIVEROO_SERVICE_NAME}:8080
    DELIVEROO_DISABLED: 'false'
    ORDERING_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/external
    URL_CALLBACK_URL: http://${ORDERING_DEMO_FRONTEND_NAME}:8080/callback
  ports:
    - "8010:8080"
  depends_on:
    - postgres

x-ordering-demo-frontend-venue-boilerplate:
  &ordering-demo-frontend-venue-boilerplate
  env_file:
    - $TB_ROOT/ordering-demo-frontend/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    INVENUE_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/external
    MODE: venue
  ports:
    - "8020:8080"
  depends_on:
    - postgres

x-ordering-gateways-frontend-boilerplate:
  &ordering-gateways-frontend-boilerplate
  env_file:
    - $TB_ROOT/ordering-gateways-frontend/.env.example
  environment:
    << : *node-service
    ORDERING_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/external
    ORDERING_INTERNAL_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/internal
  ports:
    - "8030:8080"

x-ordering-deliveroo-service-boilerplate:
  &ordering-deliveroo-service-boilerplate
  env_file:
    - $TB_ROOT/ordering-deliveroo-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    DELIVEROO_BASE_URL: http://${ORDERING_DEMO_FRONTEND_NAME}:8080/deliveroo
    ORDERING_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/external
    URL_BASE_URL: http://${ORDERING_DELIVEROO_SERVICE_NAME}:8080
  ports:
    - "8015:8080"
  depends_on:
    - postgres

x-ordering-engine-service-boilerplate:
  &ordering-engine-service-boilerplate
  env_file:
    - $TB_ROOT/ordering-engine-service/.env.example
  environment:
    << : *node-service
    << : *mysql-connect
  ports:
    - "8610:8080"
  depends_on:
    - $SINGLEAPP_DATABASE_NAME

x-partners-etl-service-boilerplate:
  &partners-etl-service-boilerplate
  env_file:
    - $TB_ROOT/partners-etl-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *node-service
    << : *postgres-connect
    AWS_S3_ENDPOINT: http://localstack:4572
    AWS_S3_STUB: "false"
    PARTNER_CONFIG_SERVICE_URL: http://${PARTNERS_CONFIG_SERVICE_NAME}:8080
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "etl.job.execute": {
          "queueURL": "http://localstack:4576/queue/etlExecute",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
    TOUCHBISTRO_LEGACY_CLOUD_BASE_URL: http://${CLOUD_SERVER_NAME}:3000/api/v2_5
  ports:
    - "8888:8080"
  depends_on:
    - postgres
    - localstack

x-partners-config-service-boilerplate:
  &partners-config-service-boilerplate
  env_file:
    - $TB_ROOT/partners-config-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "partners-config.task.venueIntegrationUpdate": {
          "queueURL": "http://localstack:4576/queue/venueIntegrationUpdate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
  ports:
    - "8090:8080"
  depends_on:
    - postgres
    - localstack

x-partners-orchestration-service-boilerplate:
  &partners-orchestration-service-boilerplate
  env_file:
    - $TB_ROOT/partners-orchestration-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    LEGACY_CLOUD_SERVICE_URL: http://${LEGACY_BRIDGE_CLOUD_SERVICE_NAME}:8080
    PARTNER_CONFIG_SERVICE_URL: http://${PARTNERS_CONFIG_SERVICE_NAME}:8080
    PARTNERS_RESERVATIONS_SERVICE_URL: http://${PARTNERS_RESERVATIONS_SERVICE_NAME}:8080
    VENUE_PROVISIONING_SERVICE_URL: http://${VENUE_PROVISIONING_SERVICE_NAME}:8080/internal
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "workflow.runNextInstruction": {
          "queueURL": "http://localstack:4576/queue/workflowRunNextInstruction",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "partners-config.task.venueIntegrationUpdate": {
          "queueURL": "http://localstack:4576/queue/venueIntegrationUpdate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
  ports:
    - "8085:8080"
  depends_on:
    - postgres
    - localstack

x-partners-reservations-service-boilerplate:
  &partners-reservations-service-boilerplate
  env_file:
    - $TB_ROOT/partners-reservations-service/.env.example
  environment:
    << : *postgres-connect
    << : *node-service
    AWS_S3_ENDPOINT: http://localstack:4572
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "venue-upload.task.venueUpload": {
          "queueURL": "http://localstack:4576/queue/venueUpload",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
  ports:
    - "8602:8080"
  depends_on:
    - postgres
    - localstack
    - $VENUE_UPLOAD_SERVICE_NAME
    - $PARTNERS_CONFIG_SERVICE_NAME
    - $PARTNERS_ORCHESTRATION_SERVICE_NAME
    - $LEGACY_BRIDGE_CLOUD_SERVICE_NAME

x-singleapp-database-boilerplate:
  &singleapp-database-boilerplate
  ports:
    - "3306:3306"

x-venue-upload-service-boilerplate:
  &venue-upload-service-boilerplate
  env_file:
    - $TB_ROOT/venue-upload-service/.env.example
  environment:
    << : *node-service
    AWS_S3_ENDPOINT: http://localstack:4572
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "venue-upload.task.venueUpload": {
          "queueURL": "http://localstack:4576/queue/venueUpload",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5,
          "sendOnly": true
        },
        "venue-upload.task.validateOrder": {
          "queueURL": "http://localstack:4576/queue/validateOrder",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
  ports:
    - "8601:8080"
  depends_on:
    - localstack

x-venue-admin-frontend-boilerplate:
  &venue-admin-frontend-boilerplate
  env_file:
    - $TB_ROOT/venue-admin-frontend/.env.example
  environment:
    - CORE_BACKEND_URL_BASE=http://${VENUE_CORE_SERVICE_NAME}:8080
    - TOUCHBISTRO_PARTNER_CONFIG_URL_BASE=http://${PARTNERS_CONFIG_SERVICE_NAME}:8080
    - TOUCHBISTRO_LEGACY_BRIDGE_API_URL_BASE=http://${LEGACY_BRIDGE_CLOUD_SERVICE_NAME}:8080
    - INFRASTRUCTURE_AUTH_SERVICE_URL=http://${INFRASTRUCTURE_AUTH_SERVICE_NAME}:8080
    - HTTP_PORT=9002   # VAF will default to :5000 for local server development.
    - NODE_ENV=production
  ports:
    - "9002:9002"
  # Note the `../`, since the Dockerfile executes from $HOME/app/dist
  entrypoint: [ "bash", "../docker-entrypoint.sh" ]
  << : *command-serve
  depends_on:
    - $VENUE_CORE_SERVICE_NAME
    - $CLOUD_SERVER_NAME
    - $LEGACY_BRIDGE_CLOUD_SERVICE_NAME
    - $PARTNERS_CONFIG_SERVICE_NAME

x-infrastructure-auth-service-boilerplate:
  &infrastructure-auth-service-boilerplate
  env_file:
    - $TB_ROOT/infrastructure-auth-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *node-service
    << : *postgres-connect
  ports:
    - "8073:8080"
  depends_on:
    - postgres

x-loyalty-gateway-service-boilerplate:
  &loyalty-gateway-service-boilerplate
  env_file:
    - $TB_ROOT/loyalty-gateway-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *node-service
    << : *postgres-connect
  ports:
    - "8600:8080"
  depends_on:
    - postgres

x-backoffice-customer-service-boilerplate:
  &backoffice-customer-service-boilerplate
  env_file:
    - $TB_ROOT/backoffice-customer-service/.env.example
  environment:
    << : *postgres-connect
    << : *node-service
    JWT_AUTH_ISSUER_JWKS_URL: http://${INFRASTRUCTURE_AUTH_SERVICE_NAME}:8080/jwks
    TASK_PROVIDER: inmemory
  ports:
    - "8700:8080"
  depends_on:
    - postgres
    - $INFRASTRUCTURE_AUTH_SERVICE_NAME

###### SERVICES ######

services:
  postgres:
    image: $POSTGRES_IMAGE_URI
    container_name: tb_postgres_container
    environment:
      - POSTGRES_USER=core
      - POSTGRES_PASSWORD=localdev
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: $REDIS_IMAGE_URI
    container_name: cloud-server-redis_container
    ports:
      - "6379:6379"

  localstack:
    image: $LOCALSTACK_IMAGE_URI
    container_name: tb_localstack_container
    ports:
      - "9888:8080" # web interface
      - "4567-4584:4567-4584"
    environment:
      - SERVICES=s3,sqs,sns
      - PORT_WEB_UI=8080
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "$TB_ROOT/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/aa_localstack_entrypoint.sh" # docker-entrypoint-initaws.d files are run in alphabetical order
      - "$TB_ROOT/venue-core-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_core_backend.sh"
      - "$TB_ROOT/venue-upload-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_venue_upload.sh"
      - "$TB_ROOT/ordering-ooa-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_ordering_service.sh"
      - "$TB_ROOT/partners-etl-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_etl.sh"
      - "$TB_ROOT/partners-config-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_partner_config.sh"
      - "$TB_ROOT/partners-orchestration-service/entrypoints/localstack-entrypoint.sh:/docker-entrypoint-initaws.d/zz_localstack_orchestration_partner.sh"

  mokta:
    << : *mokta-boilerplate
    build:
      target: dev
      context: $TB_ROOT/mokta
      args:
        - NPM_TOKEN=$NPM_TOKEN
    container_name: mokta_container
    << : *command-start

  mokta-ecr:
    << : *mokta-boilerplate
    image: $MOKTA_IMAGE_URI
    container_name: mokta-ecr_container
    << : *command-serve

  identity-user-service:
    << : *identity-user-service-boilerplate
    build:
      target: dev
      context: $TB_ROOT/identity-user-service
      args:
        - NPM_TOKEN=$NPM_TOKEN
    container_name: identity-user-service_container
    environment:
      << : *node-service
      OKTA_BASE_URL: https://mokta:8080
      INSECURE_DISABLE_SSL_VALIDATION: 'true'

  identity-user-service-ecr:
    << : *identity-user-service-boilerplate
    image: $IDENTITY_USER_SERVICE_IMAGE_URI
    container_name: identity-user-service-ecr_container
    environment:
      << : *node-service
      OKTA_BASE_URL: https://mokta-ecr:8080
      INSECURE_DISABLE_SSL_VALIDATION: 'true'

  legacy-database:
    << : *legacy-database-boilerplate
    build:
      target: db-migrate-with-seeds
      context: $TB_ROOT/legacy-database
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: tb_legacy-database
    container_name: tb_legacy-database_container
    volumes:
      - legacy-database:/var/opt/mssql/data

  legacy-database-ecr:
    << : *legacy-database-boilerplate
    image: $LEGACY_DATABASE_IMAGE_URI
    container_name: tb_legacy-database-ecr_container
    volumes:
      - legacy-database:/var/opt/mssql/data

  cloud-server:
    << : *cloud-server-boilerplate
    build:
      context: $TB_ROOT/cloud-server
    container_name: cloud-server_container

  cloud-server-ecr:
    << : *cloud-server-boilerplate
    image: $CLOUD_SERVER_IMAGE_URI
    container_name: cloud-server-ecr_container

  cloud-server-frontend-ecr:
    << : *cloud-server-frontend-boilerplate
    container_name: cloud-server-frontend-ecr_container
    image: $CLOUD_SERVER_FRONTEND_IMAGE_URI

  cloud-server-frontend:
    << : *cloud-server-frontend-boilerplate
    build:
      context: $TB_ROOT/cloud-server-frontend/packages/frontend
      args:
        # This is for running a prod build of the frontend locally
        # ** DO NOT SET THIS IN CI OR PRODUCTION-LIKE ENVIRONMENTS. **
        - USE_INSECURE_COOKIE=insecure
    container_name: cloud-server-frontend_container

  venue-core-service-ecr:
    << : *venue-core-service-boilerplate
    image: $VENUE_CORE_SERVICE_IMAGE_URI
    command: >
      bash -c '
        echo '...done'
        if [ "$START_SERVER" = "true" ]; then
          echo "Starting server.."
          yarn serve
        else
          echo "Not starting server.."
          tail -f /dev/null
        fi'
    container_name: venue-core-service-ecr

  venue-core-service:
    << : *venue-core-service-boilerplate
    build:
      target: dev
      context: $TB_ROOT/venue-core-service
      args:
        - NPM_TOKEN=$NPM_TOKEN
        - GITSHA=TESTME
    image: tb_venue-core-service
    container_name: tb_venue-core-service_container
    command: >
      bash -c '
        echo '...done'
        if [ "$START_SERVER" = "true" ]; then
          echo "Starting server.."
          yarn start
        else
          echo "Not starting server.."
          tail -f /dev/null
        fi'
    volumes:
      - $TB_ROOT/venue-core-service:/home/node/app:delegated
      - venue-core-service-node_modules:/home/node/app/node_modules:delegated

  venue-provisioning-service-ecr:
    << : *venue-provisioning-service-boilerplate
    image: $VENUE_PROVISIONING_SERVICE_IMAGE_URI
    container_name: venue-provisioning-service-ecr_container
    << : *command-serve

  venue-provisioning-service:
    << : *venue-provisioning-service-boilerplate
    build:
      context: $TB_ROOT/venue-provisioning-service
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: tb_venue-provisioning-service
    container_name: tb_venue-provisioning-service_container
    << : *command-start

  health-clinic-ecr:
    << : *health-clinic-boilerplate
    image: $HEALTH_CLINIC_IMAGE_URI
    container_name: tb_health-clinic-ecr_container

  health-clinic:
    << : *health-clinic-boilerplate
    build:
      context: $TB_ROOT/health-clinic
    image: tb_health-clinic
    container_name: tb_health-clinic_container
    volumes:
      - $TB_ROOT/health-clinic:/home/python/app

  dotnet-manage:
    << : *dotnet-boilerplate
    container_name: tb_dotnet-manage_container
    ports:
      - "9000:80"
    volumes:
      - $TB_ROOT/dotnet-depot/manage:/app:delegated

  dotnet-api:
    << : *dotnet-boilerplate
    container_name: tb_dotnet-api_container
    ports:
      - "9001:80"
    volumes:
      - $TB_ROOT/dotnet-depot/api:/app:delegated

  legacy-bridge-manage-service:
    << : *legacy-bridge-manage-service-boilerplate
    build:
      target: dev
      context: $TB_ROOT/legacy-bridge-manage-service
      args:
        - NPM_TOKEN=$NPM_TOKEN
        - GITSHA=TESTME
    image: tb_legacy-bridge-manage-service
    container_name: tb_legacy-bridge-manage-service_container
    << : *command-start

  legacy-bridge-manage-service-ecr:
    << : *legacy-bridge-manage-service-boilerplate
    image: $LEGACY_BRIDGE_MANAGE_SERVICE_IMAGE_URI
    container_name: tb_legacy-bridge-manage-service-ecr_container
    << : *command-serve

  legacy-bridge-cloud-service:
    << : *legacy-bridge-cloud-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/legacy-bridge-cloud-service
    image: tb_legacy-bridge-cloud-service
    << : *command-start
    container_name: tb_legacy-bridge-cloud-service_container
    volumes:
      - $TB_ROOT/legacy-bridge-cloud-service:/home/node/app:delegated
      - legacy-bridge-cloud-service-node_modules:/home/node/app/node_modules

  legacy-bridge-cloud-service-ecr:
    << : *legacy-bridge-cloud-service-boilerplate
    image: $LEGACY_BRIDGE_CLOUD_SERVICE_IMAGE_URI
    container_name: tb_legacy-bridge-cloud-service-ecr_container
    << : *command-serve

  ordering-ooa-service-ecr:
    << : *ordering-ooa-service-boilerplate
    image: $ORDERING_OOA_SERVICE_IMAGE_URI
    container_name: ordering-devtools_ordering-ooa-service-ecr_container
    << : *command-serve

  ordering-ooa-service:
    << : *ordering-ooa-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-ooa-service
    image: ordering-devtools_ordering-ooa-service
    container_name: ordering-devtools_ordering-ooa-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/ordering-ooa-service:/home/node/app:delegated
      - ordering-ooa-service-node_modules:/home/node/app/node_modules

  ordering-demo-frontend-ecr:
    << : *ordering-demo-frontend-boilerplate
    image: $ORDERING_DEMO_FRONTEND_IMAGE_URI
    container_name: ordering-devtools_ordering-demo-frontend-ecr_container
    << : *command-serve

  ordering-demo-frontend:
    << : *ordering-demo-frontend-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-demo-frontend
    image: ordering-devtools_ordering-demo-frontend
    container_name: ordering-devtools_ordering-demo-frontend_container
    << : *command-start
    volumes:
      - $TB_ROOT/ordering-demo-frontend:/home/node/app:delegated
      - ordering-demo-frontend-node_modules:/home/node/app/node_modules

  ordering-demo-frontend-venue:
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-demo-frontend
    image: ordering-devtools_ordering-demo-frontend-venue
    container_name: ordering-devtools_ordering-demo-frontend-venue_container
    << : *command-start
    env_file:
      - $TB_ROOT/ordering-demo-frontend/.env.example
    environment:
      << : *postgres-connect
      << : *node-service
      INVENUE_BASE_URL: http://${ORDERING_OOA_SERVICE_NAME}:8080/external
      MODE: venue
    volumes:
      - $TB_ROOT/ordering-demo-frontend:/home/node/app:delegated
      - ordering-demo-frontend-venue-node_modules:/home/node/app/node_modules
    ports:
      - "8020:8080"
    depends_on:
      - postgres

  ordering-gateways-frontend-ecr:
    << : *ordering-gateways-frontend-boilerplate
    image: $ORDERING_GATEWAYS_FRONTEND_IMAGE_URI
    container_name: ordering-devtools_ordering-gateways-frontend-ecr_container
    << : *command-serve

  ordering-gateways-frontend:
    << : *ordering-gateways-frontend-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-gateways-frontend
    image: ordering-devtools_ordering-gateways-frontend
    container_name: ordering-devtools_ordering-gateways-frontend_container
    << : *command-start
    volumes:
      - $TB_ROOT/ordering-gateways-frontend:/home/node/app:delegated
      - ordering-gateways-frontend-node_modules:/home/node/app/node_modules

  ordering-deliveroo-service-ecr:
    << : *ordering-deliveroo-service-boilerplate
    image: $ORDERING_DELIVEROO_SERVICE_IMAGE_URI
    container_name: ordering-devtools_ordering-deliveroo-service-ecr_container
    << : *command-serve

  ordering-deliveroo-service:
    << : *ordering-deliveroo-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-deliveroo-service
    image: ordering-devtools_ordering-deliveroo-service
    container_name: ordering-devtools_ordering-deliveroo-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/ordering-deliveroo-service:/home/node/app:delegated
      - ordering-deliveroo-service-node_modules:/home/node/app/node_modules

  ordering-engine-service-ecr:
    << : *ordering-engine-service-boilerplate
    image: $ORDERING_ENGINE_SERVICE_IMAGE_URI
    container_name: ordering-engine-service-ecr_container
    << : *command-serve

  ordering-engine-service:
    << : *ordering-engine-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/ordering-engine-service
    image: ordering-engine-service
    container_name: ordering-engine-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/ordering-engine-service:/home/node/app:delegated
      - ordering-engine-service-node_modules:/home/node/app/node_modules

  partners-etl-service-ecr:
    << : *partners-etl-service-boilerplate
    image: $PARTNERS_ETL_SERVICE_IMAGE_URI
    container_name: partners-devtools_partners-etl-service-ecr_container
    << : *command-serve

  partners-etl-service:
    << : *partners-etl-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/partners-etl-service
    image: partners-devtools_partners-etl-service
    container_name: partners-devtools_partners-etl-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/partners-etl-service:/home/node/app:delegated
      - partners-etl-service-node_modules:/home/node/app/node_modules

  partners-config-service-ecr:
    << : *partners-config-service-boilerplate
    image: $PARTNERS_CONFIG_SERVICE_IMAGE_URI
    container_name: partners-devtools_partners-config-service-ecr_container
    << : *command-serve

  partners-config-service:
    << : *partners-config-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/partners-config-service
    image: partners-devtools_partners-config-service
    container_name: partners-devtools_partners-config-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/partners-config-service:/home/node/app:delegated
      - partners-config-service-node_modules:/home/node/app/node_modules

  partners-orchestration-service-ecr:
    << : *partners-orchestration-service-boilerplate
    image: $PARTNERS_ORCHESTRATION_SERVICE_IMAGE_URI
    container_name: partners-devtools_partners-orchestration-service-ecr_container
    << : *command-serve

  partners-orchestration-service:
    << : *partners-orchestration-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/partners-orchestration-service
    image: partners-devtools_partners-orchestration-service
    container_name: partners-devtools_partners-orchestration-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/partners-orchestration-service:/home/node/app:delegated
      - partners-orchestration-service-node_modules:/home/node/app/node_modules

  partners-reservations-service-ecr:
    << : *partners-reservations-service-boilerplate
    image: $PARTNERS_RESERVATIONS_SERVICE_IMAGE_URI
    container_name: partners-devtools_partners-reservations-service-ecr_container
    << : *command-serve

  partners-reservations-service:
    << : *partners-reservations-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/partners-reservations-service
    image: partners-devtools_partners-reservations-service
    container_name: partners-devtools_partners-reservations-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/partners-reservations-service:/home/node/app:delegated
      - partners-reservations-service-node_modules:/home/node/app/node_modules

  singleapp-database:
    << : *singleapp-database-boilerplate
    build:
      context: $TB_ROOT/singleapp-database
    image: singleapp-database
    container_name: singleapp-database_container
    volumes:
      - singleapp-database:/var/lib/mysql/

  singleapp-database-ecr:
    << : *singleapp-database-boilerplate
    image: $SINGLEAPP_DATABASE_IMAGE_URI
    container_name: singleapp-database-ecr_container
    volumes:
      - singleapp-database:/var/lib/mysql/

  venue-upload-service-ecr:
    << : *venue-upload-service-boilerplate
    image: $VENUE_UPLOAD_SERVICE_IMAGE_URI
    container_name: venue-devtools_venue-upload-service-ecr_container
    << : *command-serve

  venue-upload-service:
    << : *venue-upload-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/venue-upload-service
    image: venue-devtools_venue-upload-service
    container_name: venue-devtools_venue-upload-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/venue-upload-service:/home/node/app:delegated
      - venue-upload-service-node_modules:/home/node/app/node_modules

  venue-admin-frontend-ecr:
    << : *venue-admin-frontend-boilerplate
    image: $VENUE_ADMIN_FRONTEND_IMAGE_URI
    container_name: venue-admin-frontend-ecr_container
    << : *command-serve

  venue-admin-frontend:
    << : *venue-admin-frontend-boilerplate
    build:
      target: release
      context: $TB_ROOT/venue-admin-frontend
      args:
        - NPM_TOKEN=$NPM_TOKEN
        # ** DO NOT SET THIS IN CI OR PRODUCTION-LIKE ENVIRONMENTS. **
        # ^ This is to reduce the hard dependency on cloud-server[-frontend]
        # until "mokta" is available.
        # - SSO_INSECURE_BACKDOOR_DO_NOT_USE_ANYWHERE_BUT_LOCALHOST==insecure
    container_name: venue-admin-frontend_container

  infrastructure-auth-service-ecr:
    << : *infrastructure-auth-service-boilerplate
    image: $INFRASTRUCTURE_AUTH_SERVICE_IMAGE_URI
    container_name: infrastructure-devtools_infrastructure-auth-service-ecr_container
    << : *command-serve

  infrastructure-auth-service:
    << : *infrastructure-auth-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/infrastructure-auth-service
    image: infrastructure-devtools_infrastructure-auth-service
    container_name: infrastructure-devtools_infrastructure-auth-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/infrastructure-auth-service:/home/node/app:delegated

  loyalty-gateway-service-ecr:
    << : *loyalty-gateway-service-boilerplate
    image: $LOYALTY_GATEWAY_SERVICE_IMAGE_URI
    container_name: loyalty-devtools_loyalty-gateway-service-ecr_container
    << : *command-serve

  loyalty-gateway-service:
    << : *loyalty-gateway-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/loyalty-gateway-service
    image: loyalty-devtools_loyalty-gateway-service
    container_name: loyalty-devtools_loyalty-gateway-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/loyalty-gateway-service:/home/node/app:delegated

  backoffice-customer-service-ecr:
    << : *backoffice-customer-service-boilerplate
    image: $BACKOFFICE_CUSTOMER_SERVICE_IMAGE_URI
    container_name: backoffice-devtools_backoffice-customer-service-ecr_container
    << : *command-serve

  backoffice-customer-service:
    << : *backoffice-customer-service-boilerplate
    build:
      << : *build-node-dev
      context: $TB_ROOT/backoffice-customer-service
    image: backoffice-devtools_backoffice-customer-service
    container_name: backoffice-devtools_backoffice-customer-service_container
    << : *command-start
    volumes:
      - $TB_ROOT/backoffice-customer-service:/home/node/app:delegated
      - backoffice-customer-service-node_modules:/home/node/app/node_modules

###### VOLUMES ######

volumes:
  postgres:
  legacy-database:
  singleapp-database:
  venue-core-service-node_modules:
  legacy-bridge-cloud-service-node_modules:
  ordering-ooa-service-node_modules:
  ordering-demo-frontend-node_modules:
  ordering-demo-frontend-venue-node_modules:
  ordering-deliveroo-service-node_modules:
  ordering-gateways-frontend-node_modules:
  ordering-engine-service-node_modules:
  partners-etl-service-node_modules:
  partners-config-service-node_modules:
  partners-orchestration-service-node_modules:
  partners-reservations-service-node_modules:
  venue-upload-service-node_modules:
  infrastructure-auth-service-node_modules:
  loyalty-gateway-service-node_modules:
  backoffice-customer-service-node_modules:
