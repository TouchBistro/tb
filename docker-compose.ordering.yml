version: '3.7'

x-json-logger-config:
  &json-logger-config
  LOGGER_CONFIG_JSON: >
    {
      "transports": {
        "devConsole": {
          "provider": "winston.transports.Console",
          "config": {
            "colorize": true,
            "timestamp": true,
            "json": false
          }
        }
      },
      "env": {
        "development": {
          "rules": [
            {
              "pattern": "*",
              "binding": {
                "transport": ["devConsole"],
                "level": "info"
              }
            }
          ]
        }
      }
    }

x-postgresconnect:
  &postgres-connect
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: core
  DB_PASSWORD: localdev
  DB_DISABLE_SSL: "true"

x-nodeservice:
  &node-service
  << : *json-logger-config
  HTTP_PORT: 8080

x-touchbistro-ordering-service-boilerplate:
  &touchbistro-ordering-service-boilerplate
  env_file:
    - ./touchbistro-ordering-service/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    TASK_PROVIDER: awssqs
    TASK_AWS_SQS_CONFIG_JSON: >
      {
        "ordering.notification.venue.menuUpdate": {
          "queueURL": "http://localstack:4576/queue/menuUpdate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.venue.orderCancelled": {
          "queueURL": "http://localstack:4576/queue/orderCancelled",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.venue.ordersPending": {
          "queueURL": "http://localstack:4576/queue/ordersPending",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.notification.gateway.ordersStatus": {
          "queueURL": "http://localstack:4576/queue/ordersStatus",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.order.expiryCheck": {
          "queueURL": "http://localstack:4576/queue/expiryCheck",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        },
        "ordering.order.validate": {
          "queueURL": "http://localstack:4576/queue/orderValidate",
          "messageThrottle": 1,
          "visibilityTimeout": 10,
          "waitTimeSeconds": 5,
          "sleepTimeSeconds": 5
        }
      }
    TOUCHBISTRO_LEGACY_CLOUD_BASE_URL: http://touchbistro-node-legacy-cloud-ecr:8080
  ports:
    - "8005:8080"
  depends_on:
    - postgres
    - localstack

x-touchbistro-ordering-gateway-sample-boilerplate:
  &touchbistro-ordering-gateway-sample-boilerplate
  env_file:
    - ./touchbistro-ordering-gateway-sample/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    DELIVEROO_BASE_URL: http://ordering-deliveroo-ecr:8080
    DELIVEROO_DISABLED: 'false'
    ORDERING_BASE_URL: http://touchbistro-ordering-service-ecr:8080/external
    URL_CALLBACK_URL: http://touchbistro-ordering-gateway-sample-ecr:8080/callback
  ports:
    - "8010:8080"
  depends_on:
    - postgres

x-touchbistro-ordering-gateway-sample-venue-boilerplate:
  &touchbistro-ordering-gateway-sample-venue-boilerplate
  env_file:
    - ./touchbistro-ordering-gateway-sample/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    INVENUE_BASE_URL: http://touchbistro-ordering-service-ecr:8080/external
    MODE: venue
  ports:
    - "8020:8080"
  depends_on:
    - postgres

x-touchbistro-ordering-frontend-boilerplate:
  &touchbistro-ordering-frontend-boilerplate
  env_file:
    - ./touchbistro-ordering-frontend/.env.example
  environment:
    << : *node-service
    ORDERING_BASE_URL: http://touchbistro-ordering-service-ecr:8080/external
    ORDERING_INTERNAL_BASE_URL: http://touchbistro-ordering-service-ecr:8080/internal 
  ports:
    - "8030:8080"

x-ordering-deliveroo-boilerplate:
  &ordering-deliveroo-boilerplate
  env_file:
    - ./ordering-deliveroo/.env.example
  entrypoint: ["bash", "./docker-entrypoint.sh"]
  environment:
    << : *postgres-connect
    << : *node-service
    DELIVEROO_BASE_URL: http://touchbistro-ordering-gateway-sample-ecr:8080/deliveroo
    ORDERING_BASE_URL: http://touchbistro-ordering-service-ecr:8080/external
    URL_BASE_URL: http://ordering-deliveroo-ecr:8080
  ports:
    - "8015:8080"
  depends_on:
    - postgres

services:
  touchbistro-ordering-service-ecr:
    << : *touchbistro-ordering-service-boilerplate
    image: 651264383976.dkr.ecr.us-east-1.amazonaws.com/touchbistro-ordering-service:develop
    container_name: ordering-devtools_touchbistro-ordering-service-ecr_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'

  touchbistro-ordering-service:
    << : *touchbistro-ordering-service-boilerplate
    build:
      target: dev
      context: ./touchbistro-ordering-service
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: ordering-devtools_touchbistro-ordering-service
    container_name: ordering-devtools_touchbistro-ordering-service_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
    volumes:
      - ./touchbistro-ordering-service:/home/node/app:delegated
      - touchbistro-ordering-service-node_modules:/home/node/app/node_modules

  touchbistro-ordering-gateway-sample-ecr:
    << : *touchbistro-ordering-gateway-sample-boilerplate
    image: 651264383976.dkr.ecr.us-east-1.amazonaws.com/touchbistro-ordering-gateway:develop
    container_name: ordering-devtools_touchbistro-ordering-gateway-sample-ecr_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'

  touchbistro-ordering-gateway-sample:
    << : *touchbistro-ordering-gateway-sample-boilerplate
    build:
      target: dev
      context: ./touchbistro-ordering-gateway-sample
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: ordering-devtools_touchbistro-ordering-gateway-sample
    container_name: ordering-devtools_touchbistro-ordering-gateway-sample_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
    volumes:
      - ./touchbistro-ordering-gateway-sample:/home/node/app:delegated
      - touchbistro-ordering-gateway-sample-node_modules:/home/node/app/node_modules

  touchbistro-ordering-gateway-sample-venue:
    build:
      target: dev
      context: ./touchbistro-ordering-gateway-sample
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: ordering-devtools_touchbistro-ordering-gateway-sample-venue
    container_name: ordering-devtools_touchbistro-ordering-gateway-sample-venue_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
    env_file:
      - ./touchbistro-ordering-gateway-sample/.env.example
    environment:
      << : *postgres-connect
      << : *node-service
      INVENUE_BASE_URL: http://touchbistro-ordering-service-ecr:8080/external
      MODE: venue
    volumes:
      - ./touchbistro-ordering-gateway-sample:/home/node/app:delegated
      - touchbistro-ordering-gateway-sample-venue-node_modules:/home/node/app/node_modules
    ports:
      - "8020:8080"
    depends_on:
      - postgres

  touchbistro-ordering-frontend-ecr:
    << : *touchbistro-ordering-frontend-boilerplate
    image: 651264383976.dkr.ecr.us-east-1.amazonaws.com/touchbistro-ordering-frontend:develop
    container_name: ordering-devtools_touchbistro-ordering-frontend-ecr_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'

  touchbistro-ordering-frontend:
    << : *touchbistro-ordering-frontend-boilerplate
    build:
      target: dev
      context: ./touchbistro-ordering-frontend
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: ordering-devtools_touchbistro-ordering-frontend
    container_name: ordering-devtools_touchbistro-ordering-frontend_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
    volumes:
      - ./touchbistro-ordering-frontend:/home/node/app:delegated
      - touchbistro-ordering-frontend-node_modules:/home/node/app/node_modules

  ordering-deliveroo-ecr:
    << : *ordering-deliveroo-boilerplate
    image: 651264383976.dkr.ecr.us-east-1.amazonaws.com/deliveroo-service:develop
    container_name: ordering-devtools_ordering-deliveroo-ecr_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn serve; else tail -f /dev/null; fi'

  ordering-deliveroo:
    << : *ordering-deliveroo-boilerplate
    build:
      target: dev
      context: ./ordering-deliveroo
      args:
        - NODE_ENV=development
        - NPM_TOKEN=$NPM_TOKEN
    image: ordering-devtools_ordering-deliveroo
    container_name: ordering-devtools_ordering-deliveroo_container
    command: bash -c 'if [ "$START_SERVER" = "true" ]; then yarn start; else tail -f /dev/null; fi'
    volumes:
      - ./ordering-deliveroo:/home/node/app:delegated
      - ordering-deliveroo-node_modules:/home/node/app/node_modules

volumes:
  touchbistro-ordering-service-node_modules:
  touchbistro-ordering-gateway-sample-node_modules:
  touchbistro-ordering-gateway-sample-venue-node_modules:
  ordering-deliveroo-node_modules:
  touchbistro-ordering-frontend-node_modules:
